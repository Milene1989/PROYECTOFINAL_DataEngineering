input {
  # Entrada para datos BATCH desde CSV
  file {
    path => "/Users/milene/Desktop/MAESTRIA CIENCIA DE DATOS/7. INGENIERIA DE DATOS/PROYECTO FINAL/Datos_financieros.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain { charset => "UTF-8" }
    tags => ["batch"]  # Etiqueta para identificar el flujo
  }

  # Entrada para datos REAL-TIME desde Kafka
  kafka {
    bootstrap_servers => "localhost:9092"
    topics => ["transacciones_financieras"]
    codec => "json"
    auto_offset_reset => "earliest"
    group_id => "logstash_transacciones"
    # group_instance_id => "logstash_1"  # Identificador único
    tags => ["real-time"]  # Etiqueta para identificar el flujo
  }
}

filter {
  # Filtros para datos BATCH (CSV)
  if "batch" in [tags] {
    csv {
      separator => ","
      columns => ["fecha", "simbolo", "apertura", "cierre", "volumen"]
    }

    # Eliminar fila de encabezado
    if [fecha] == "fecha" {
      drop {}
    }

    # Conversión de tipos
    mutate {
      convert => {
        "apertura" => "float"
        "cierre" => "float"
        "volumen" => "integer"
      }
    }

    # Formateo de fecha
    date {
      match => ["fecha", "yyyy-MM-dd"]
      target => "fecha"
    }
  }

  # Filtros para datos REAL-TIME (Kafka)
  if "real-time" in [tags] {
    # Validación y conversión de timestamp
    if [timestamp] {
      date {
        match => ["timestamp", "yyyy-MM-dd HH:mm:ss"]
        target => "@timestamp"
        timezone => "UTC"
      }
    } else {
      mutate {
        add_tag => ["timestamp_missing"]
        add_field => { "error" => "Campo 'timestamp' no encontrado" }
      }
    }

    # Conversión de campos numéricos
    if [cantidad] and [precio_unitario] and [total] {
      mutate {
        convert => {
          "cantidad" => "integer"
          "precio_unitario" => "float"
          "total" => "float"
        }
      }
    } else {
      mutate {
        add_tag => ["numeric_fields_missing"]
        add_field => { "error" => "Campos numéricos faltantes o inválidos" }
      }
    }

    # Limpieza de campo 'error'
    if [estado] == "EXITOSO" {
      mutate {
        remove_field => ["error"]
      }
    }


    # === Transformaciones ===

    # Se calcula precio promedio ponderado
    if [total] and [cantidad] {
      ruby {
        code => '
          total = event.get("total").to_f
          cantidad = event.get("cantidad").to_f
          event.set("precio_promedio", total / cantidad)
        '
      }
    }

    # Se clasifica transacciones por monto
    if [total] {
      ruby {
        code => '
          total = event.get("total").to_f
          if total < 10000
            event.set("categoria_monto", "BAJO")
          elsif total >= 10000 && total <= 50000
            event.set("categoria_monto", "MEDIO")
          else
            event.set("categoria_monto", "ALTO")
          end
        '
      }
    }

    # Se enriquece con descripción del estado
    if [estado] {
      mutate {
        add_field => {
          "descripcion_estado" => "%{estado} == 'EXITOSO' ? 'Transacción exitosa' : 'Transacción fallida'"
        }
      }
    }
  }
}


output {
  # Salida para datos BATCH
  if "batch" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "finanzas_batch"
    }
  }

  # Salida para datos REAL-TIME
  if "real-time" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "transacciones_nrt"
      ilm_enabled => false
      manage_template => false
    }
  }

  # Salida a consola para depuración (opcional)
  stdout {
    codec => json 
  }
}